services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: bank-entities-postgres
    environment:
      POSTGRES_DB: bank_entities_db
      POSTGRES_USER: bank_user
      POSTGRES_PASSWORD: bank_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bank_user -d bank_entities_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Logstash
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bank-entities-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: bank-entities-logstash
    ports:
      - "5001:5000"
      - "9600:9600"
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    networks:
      - bank-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: bank-entities-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - bank-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: bank-entities-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: bank-entities-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - bank-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zipkin for distributed tracing
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: bank-entities-zipkin
    ports:
      - "9411:9411"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9411/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Bank Entities API Application
  bank-entities-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bank-entities-api
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank_entities_db
      SPRING_DATASOURCE_USERNAME: bank_user
      SPRING_DATASOURCE_PASSWORD: bank_password
      APP_BASE_URL: http://bank-entities-api:8080
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    networks:
      - bank-network
    depends_on:
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  bank-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data: